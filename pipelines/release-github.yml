# CI Enabled
trigger:
  batch: true
  branches:
    include:
    - releases/*

pool: 
  default

variables:
  Branch: '$(Build.SourceBranch)'
  buildSuffix: '$(Build.BuildNumber)' 
  ${{ if startsWith(variables['Build.SourceBranchName'], 'release') }}:
    Variable_Group: 'ARMTemplate_ReleaseEnvironment'
  ${{ if not(startsWith(variables['Build.SourceBranchName'], 'release')) }}:
    Variable_Group: 'ARMTemplate_TestEnvironment'

stages:
- stage: GitHubRelease
  jobs:
    - deployment: 'GitHubRelease'
      displayName: 'Release new version to GitHub'
      environment: 'ApproveGitHubRelease'
      variables:
        - group: ${{variables.Variable_Group}}
      strategy:
       runOnce:
         deploy:
           steps:
             - checkout: none

             - task: Bash@3
               env:
                DEVOPS_PERSONAL_ACCESS_TOKEN: $(DEVOPS_PERSONAL_ACCESS_TOKEN)
                GITHUB_ACCESS_TOKEN: $(GITHUB_ACCESS_TOKEN)
               inputs:
                targetType: 'inline'
                script: |
                  TARGET_BRANCH="master"
                  BRANCH_NAME=$(echo $(Branch) | cut -d'/' -f 3- )
                  PROJECT="UnifiedEdgeScenarios"
                  
                  set -e
                  
                  if [[ $(az extension list --query "[?name=='azure-devops'].name" --output tsv | wc -c) -eq 0 ]]; then
                    echo "$(info) Installing azure-devops extension"
                    az extension add --name azure-devops
                  fi

                  if [ -d "${GITHUB_REPO_NAME}" ]; then
                    echo "Deleting the git directory as it already exists"
                    sudo rm -rf "${GITHUB_REPO_NAME}"
                  fi

                  if [ -d "UnifiedEdgeScenarios" ]; then
                    echo "Deleting the git directory as it already exists"
                    sudo rm -rf UnifiedEdgeScenarios
                  fi

                  echo ${DEVOPS_PERSONAL_ACCESS_TOKEN} | az devops login --org "https://dev.azure.com/AED-E2E-Experiences/"
                  PR_DETAILS=$(az repos pr list --status "completed" --target-branch "$BRANCH_NAME" --project "$PROJECT" --top 1)
                  PR_DESCRIPTION=$(echo $PR_DETAILS | jq -r '.[0].description')
                  PR_TITLE=$(echo $PR_DETAILS | jq -r '.[0].title')

                  if [ "$PR_DESCRIPTION" == "null" ]; then
                    PR_DESCRIPTION="Merge latest changes from branch $BRANCH_NAME"
                  fi

                  if [ "$PR_TITLE" == "null" ]; then
                    PR_TITLE="$BRANCH_NAME version"
                  fi

                  # Clone the GitHub repo to local
                  git clone "https://${GITHUB_REPO_USERNAME}:${GITHUB_ACCESS_TOKEN}@github.com/${GITHUB_REPO_USERNAME}/${GITHUB_REPO_NAME}.git"

                  cd ${GITHUB_REPO_NAME}/

                  # Add remote upstream of target GitHUb repo
                  git remote add upstream "https://github.com/${TARGET_GITHUB_REPO_USERNAME}/${TARGET_GITHUB_REPO_NAME}"

                  # Rebase GitHub repo with Target GitHub repo
                  git fetch upstream
                  git checkout master
                  git merge upstream/master
                  git push origin master

                  cd ..

                  # Clone the current release branch version to local
                  git clone -b "${BRANCH_NAME}" --single-branch "https://${DEVOPS_REPO_USERNAME}:${DEVOPS_PERSONAL_ACCESS_TOKEN}@dev.azure.com/AED-E2E-Experiences/UnifiedEdgeScenarios/_git/UnifiedEdgeScenarios"
                  echo "Cloned ${BRANCH_NAME} to local"
                  
                  cd UnifiedEdgeScenarios/

                  # Remove the current remote origin from devops repo and set it to GitHub repo which is fork from target GitHub repo
                  git remote rm origin
                  git remote add origin "https://github.com/${GITHUB_REPO_USERNAME}/${GITHUB_REPO_NAME}.git"
                  git remote set-url origin "https://${GITHUB_REPO_USERNAME}:${GITHUB_ACCESS_TOKEN}@github.com/${GITHUB_REPO_USERNAME}/${GITHUB_REPO_NAME}.git"
                  

                  # Push the current release branch changes to GitHub repo, it will create a new branch with current branch name
                  echo "Upload files to github in branch ${BRANCH_NAME}"
                  git push origin "${BRANCH_NAME}"

                  # Raise the Pull request to GitHub repo's master branch from this new branch
                  echo "Raising PR from branch \"${BRANCH_NAME}\" to master in GitHub repo \"${GITHUB_REPO_USERNAME}/${GITHUB_REPO_NAME}\""
                  PR_RESPONSE=$(curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" "https://api.github.com/repos/${GITHUB_REPO_USERNAME}/${GITHUB_REPO_NAME}/pulls" -d '{"head":"'"$BRANCH_NAME"'","base":"'"$TARGET_BRANCH"'","title":"'"$PR_TITLE"'","body":"'"$PR_DESCRIPTION"'"}')
                  PR_URL=$(echo $PR_RESPONSE | jq '.url' | cut -d'"' -f 2)

                  
                  # Checking whether PR is created by checking non-empty value for PR_URL from PR_RESPONSE
                  if [ "$PR_URL" == "null" ]; then
                    echo "The following is the error message for PR:"
                    echo "$(echo $PR_RESPONSE | jq '.message')"
                    echo "$(echo $PR_RESPONSE | jq '.errors[0].message')"
                    exit 1
                  fi

                  echo "Pull Request is created on GitHub to merge latest changes"
                  # Adding delay for checking the status of PR
                  sleep 10s

                  PR_STATUS=$(curl -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}"  ${PR_URL})
                  MERGE_STATUS=$(echo $PR_STATUS | jq '.mergeable')

                  echo "Checking mergeability of pull request"
                  if [ "$MERGE_STATUS" == "true" ]; then
                    echo "Pull Request can be merge automatically"
                    PR_STATUS=$(curl -X PUT -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}"  ${PR_URL}/merge -d '{"commit_title":"'"${BRANCH_NAME}"' merged"}')
                    
                    # PR_STATUS=$(curl -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}"  ${PR_URL})
                    COMPLETION_STATUS=$(echo $PR_STATUS | jq '.merged')
                    if [ "$COMPLETION_STATUS" == "true" ]; then
                      echo "Pull Request successfully merged"
                    else
                      echo "Pull Request is not completed"
                      exit 1
                    fi
                  elif [ "$MERGE_STATUS" == "false" ]; then
                    echo "Pull Request can not be merge automatically"
                    exit 1
                  fi

                  echo "New changes have been merged in master branch from branch ${BRANCH_NAME}"

                  echo "Raising PR to GitHub repo \"${TARGET_GITHUB_REPO_USERNAME}/${TARGET_GITHUB_REPO_NAME}\""
                  PR_RESPONSE=$(curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}" "https://api.github.com/repos/${TARGET_GITHUB_REPO_USERNAME}/${TARGET_GITHUB_REPO_NAME}/pulls" -d '{"head":"'"$GITHUB_REPO_USERNAME"':master","base":"'"${TARGET_BRANCH}"'","title":"'"${PR_TITLE}"'","body":"'"${PR_DESCRIPTION}"'"}')
                  PR_URL=$(echo $PR_RESPONSE | jq '.url' | cut -d'"' -f 2)
                  
                  # Checking whether PR is created by checking non-empty value for PR_URL from PR_RESPONSE
                  if [ "$PR_URL" == "null" ]; then
                    echo "The following is the error message for PR:"
                    echo "$(echo $PR_RESPONSE | jq '.message')"
                    echo "$(echo $PR_RESPONSE | jq '.errors[0].message')"
                    exit 1
                  fi

                  # Adding delay for checking the status of PR
                  sleep 10s

                  PR_STATUS=$(curl -X GET -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${GITHUB_ACCESS_TOKEN}"  ${PR_URL})
                  MERGE_STATUS=$(echo $PR_STATUS | jq '.mergeable')
                  
                  echo "Checking mergeability of pull request"
                  if [ "$MERGE_STATUS" == "true" ]; then
                    echo "Pull Request is raised. Please check it on github"
                    PR_NUMBER=$(echo $PR_STATUS | jq '.number')
                    echo "https://github.com/${TARGET_GITHUB_REPO_USERNAME}/${TARGET_GITHUB_REPO_NAME}/pull/${PR_NUMBER}"
                  elif [ "$MERGE_STATUS" == "false" ]; then
                    echo "Pull Request can not be merge automatically"
                    exit 1
                  fi

                  # Remove current branch files and GitHub repo files from local
                  cd ..
                  sudo rm -rf UnifiedEdgeScenarios/
                  sudo rm -rf ${GITHUB_REPO_NAME}/

                workingDirectory: '$(System.DefaultWorkingDirectory)'
