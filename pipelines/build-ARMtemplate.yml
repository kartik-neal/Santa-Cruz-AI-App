# specific branch build with batching
trigger:
  batch: true
  paths:
    include:
    - deployment/arm
    - edge-solution

# Build after completion of Release WebApp
resources:
  pipelines:
  - pipeline: build
    project: UnifiedEdgeScenarios
    source: Release ues-app
    trigger:
      enabled: true

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildSuffix: '$(Build.BuildNumber)' 
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    Variable_Group: 'ARMTemplateVariablesRelease'
  ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
     Variable_Group: 'ARMTemplateVariablesTest'


stages:
- stage: 'Build'
  jobs:
  - job: 'Build'
    variables:
     - group: ${{variables.Variable_Group}}
    displayName: 'Build ARM Template'
    steps:
    - checkout: self

    - task: Bash@3
      displayName: 'ShellCheck validation for arm template deployment scripts'
      inputs:
        targetType: 'inline'
        script: |
          
          IS_SHELLCHECK_INSTALLED=$(apt list --installed | grep -c -w shellcheck)
          if [ "$IS_SHELLCHECK_INSTALLED" -eq 0 ]; then
              echo "Installing shellcheck"
              sudo apt-get install shellcheck
              echo "Installed shellcheck"
          fi
          
          # Change directory location to template scripts folder
          cd deployment/arm/scripts
          
          # Run shellcheck, Shellcheck will return a list of warnings if the script is not complient with all the rules
          # We are checking the result returned by shellcheck.
          SHELL_CHECK_RESULT_DISK_SETUP=$(shellcheck ./disk-setup.sh -x)
          SHELL_CHECK_RESULT_IOT_SETUP=$(shellcheck ./create-setup-iot-edge-device.sh -x)
          SHELL_CHECK_RESULT_DEPLOY_MODULES=$(shellcheck ./deploy-modules.sh -x)
          if [ -z "$SHELL_CHECK_RESULT_DISK_SETUP" ] && [ -z "$SHELL_CHECK_RESULT_IOT_SETUP" ] && [ -z "$SHELL_CHECK_RESULT_DEPLOY_MODULES" ]; then
              echo "Pass: There are no warnings from shellcheck"
          else
              if [ ! -z "$SHELL_CHECK_RESULT_DISK_SETUP" ]; then
              echo "The following are the warnings for disk setup script"
              echo "$SHELL_CHECK_RESULT_DISK_SETUP"
              fi
              if [ ! -z "$SHELL_CHECK_RESULT_IOT_SETUP" ]; then
              echo "The following are the warnings for iot setup script"
              echo "$SHELL_CHECK_RESULT_IOT_SETUP"
              fi
              if [ ! -z "$SHELL_CHECK_RESULT_DEPLOY_MODULES" ]; then
              echo "The following are the warnings for deploy modules script"
              echo "$SHELL_CHECK_RESULT_DEPLOY_MODULES"
              fi
              exit 1
          fi
        workingDirectory: '/home/vsts/work/1/s'
      
    - task: DownloadPipelineArtifact@2
      enabled: true
      displayName: 'Download artifacts from WebApp Build Pipeline'
      inputs:
        buildType: 'specific'
        project: 'e9d7d516-43c2-413f-b83b-f320777504c6'
        definition: '14'
        buildVersionToDownload: 'latest'
        targetPath: '/home/vsts/work/1/s'

    - task: CopyFiles@2
      displayName: 'Copy deployment manifest files to a combined folder'
      inputs:
        SourceFolder: '/home/vsts/work/1/s/edge-solution/'
        Contents: |
          .env
          deployment.camera.template.json
        TargetFolder: '/home/vsts/work/1/s/edge-solution/combined'
    
    - task: CopyFiles@2
      displayName: 'Copy CameraStream module to a combined folder'
      inputs:
        SourceFolder: '/home/vsts/work/1/s/edge-solution/'
        Contents: |
          modules/CameraStream/module.json
        TargetFolder: '/home/vsts/work/1/s/edge-solution/combined/modules/CameraStream'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy Detector module to a combined folder'
      inputs:
        SourceFolder: '/home/vsts/work/1/s/edge-solution/'
        Contents: |
          modules/Detector/module.json
        TargetFolder: '/home/vsts/work/1/s/edge-solution/combined/modules/Detector'
        flattenFolders: true
    
    # Creating the manifest bundle zip from combined folder
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '/home/vsts/work/1/s/edge-solution/combined'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '/home/vsts/work/1/s/manifest-bundle.zip'
        replaceExistingArchive: true

    - task: CopyFiles@2
      displayName: 'Copy deployment manifest files to a combined folder'
      inputs:
        SourceFolder: '/home/vsts/work/1/s/'
        Contents: |
          manifest-bundle.zip
          ues_app/people-detection-app.zip
          deployment/arm/scripts/create-setup-iot-edge-device.sh
          deployment/arm/scripts/deploy-modules.sh
          deployment/arm/scripts/disk-setup.sh
          deployment/arm/azuredeploy.json
        TargetFolder: '/home/vsts/work/1/s/arm_template_bundle'


    - task: Bash@3
      enabled: true
      displayName: 'Update the ARM template for primaryScriptUrl to temporary container in storage account and update deploy-modules script'
      env:
        RELEASE_STORAGE_ACCOUNT_KEY: $(RELEASE_STORAGE_ACCOUNT_KEY)
        SP_APP_PWD: $(SP_APP_PWD)
      inputs:
        targetType: 'inline'
        script: |
          # Exit the script on any error
          set -e
          echo $(pwd)
          echo $(ls)
          
          STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME="temp-arm-deploy-scripts"

          MANIFEST_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME}/manifest-bundle.zip"
          sed -i 's#^\(SAS_URL[ ]*=\).*#\1\"'"$MANIFEST_URL"'\"#g' "deploy-modules.sh"
          
          IS_JQ_INSTALLED=$(apt list --installed | grep -c -w jq)
          if [ "$IS_JQ_INSTALLED" -eq 0 ]; then
              echo "Installing jq"
              sudo apt-get install jq
              echo "Installed jq"
          fi
          
          echo "Updating Primary scripts Url for deploymentScript in arm template"
          
          SCRIPT_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME}/disk-setup.sh"
          jq --arg a "$SCRIPT_URL" '.resources[5].properties.template.resources[1].properties.primaryScriptUri = $a' azuredeploy.json > "tmp" && mv "tmp" azuredeploy.json

          SCRIPT_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME}/create-setup-iot-edge-device.sh"
          jq --arg a "$SCRIPT_URL" '.resources[6].properties.template.resources[1].properties.primaryScriptUri = $a' azuredeploy.json > "tmp" && mv "tmp" azuredeploy.json

          SCRIPT_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME}/deploy-modules.sh"
          jq --arg a "$SCRIPT_URL" '.resources[7].properties.template.resources[5].properties.primaryScriptUri = $a' azuredeploy.json > "tmp" && mv "tmp" azuredeploy.json
          
          SCRIPT_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${STORAGE_ACCOUNT_ARM_SCRIPTS_CONTAINER_NAME}/people-detection-app.zip"
          jq --arg a "$SCRIPT_URL" '.resources[8].properties.template.resources[1].resources[3].properties.packageUri = $a' azuredeploy.json > "tmp" && mv "tmp" azuredeploy.json
          
          echo "Updated Primary scripts Url for deploymentScript in arm template"

        workingDirectory: '/home/vsts/work/1/s/arm_template_bundle'
    
    # Creating the ARM Template deployment bundle zip.
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '/home/vsts/work/1/s/arm_template_bundle'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/arm_deployment-bundle.zip'
        replaceExistingArchive: true

    # Publishing the pipeline artifact
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/arm_deployment-bundle.zip'
        artifact: 'arm_deployment-bundle'
        publishLocation: 'pipeline'
