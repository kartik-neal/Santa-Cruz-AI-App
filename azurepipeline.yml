# Code for deploying a web app
# using files from multiple repos
# repository is the ID of external repository
# type: git specifies, it's present in azure repository in same project
# ref is used to refer to which particular branch
resources:
 repositories:
   - repository: uesapp
     type: git
     name: ues-app
     ref: master

variables:
 uiSource: '$(pwd)/uesapp/app'
 uiBuild: '$(uiSource)/build'
 buildSuffix: '$(Build.BuildNumber)'

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

# multi-checkout
steps:
- checkout: uesapp
  path: s/uesapp
- checkout: self
  path: s/test
      
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

# script for creating build in specific folder
- script: |
    pushd $(uiSource)
    npm install
    npm run build --prod --nomaps
    popd

# copying the files from build folder to uesmessagesapp
- task: CopyFiles@2
  inputs:
    SourceFolder: '/home/vsts/work/1/s/uesapp/app/build'
    Contents: '**'
    TargetFolder: '/home/vsts/work/1/s/uesapp/api/public'
  displayName: 'npm install and build and copy'

# install dependencies for api
- script: |
    pushd $(pwd)/uesapp/api
    npm install
    popd

# creating the zip for app deployment
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'uesapp/api'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/people-detection-app.zip'
    replaceExistingArchive: true


- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'
    TargetFolder: '/home/vsts/work/1/s/test/combined'


# Copy all the required files for deployment to a folder
- task: CopyFiles@2
  displayName: 'Copy Files to a combined folder'
  inputs:
    SourceFolder: '/home/vsts/work/1/s/test/'
    Contents: |
      README.md 
      people_detection/simple/RtcvDeployment/modules/CameraStream/camera-stream/video/staircase.mp4
      people_detection/simple/RtcvDeployment/deployment.camera.template.json
      people_detection/simple/RtcvDeployment/prod.env
      mariner-vm-setup.sh
      mariner-vm-variables.template
      setup.sh
      deploy-manifest.sh
      variables.template
      frontend-setup.sh
      frontend-variables.template
    TargetFolder: '/home/vsts/work/1/s/test/combined'
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy CameraStream module to a combined folder'
  inputs:
    SourceFolder: '/home/vsts/work/1/s/test/'
    Contents: |
      people_detection/simple/RtcvDeployment/modules/CameraStream/module.json
    TargetFolder: '/home/vsts/work/1/s/test/combined/modules/CameraStream'
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy Detector module to a combined folder'
  inputs:
    SourceFolder: '/home/vsts/work/1/s/test/'
    Contents: |
      people_detection/simple/RtcvDeployment/modules/Detector/module.json
    TargetFolder: '/home/vsts/work/1/s/test/combined/modules/Detector'
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy docs to a combined folder'
  inputs:
    SourceFolder: '/home/vsts/work/1/s/test/'
    Contents: |
      docs/*
    TargetFolder: '/home/vsts/work/1/s/test/combined'

# Creating the deployment bundle zip from combined folder
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '/home/vsts/work/1/s/test/combined'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/deployment-bundle.zip'
    replaceExistingArchive: true


- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      if [ "$CREATE_NEW_CONTAINER" == "true" ];then
        az storage container create \
        --account-name $(STORAGE_ACCOUNT_NAME) \
        --account-key $(STORAGE_ACCOUNT_KEY) \
        --name "$CONTAINER_NAME" \

        az storage container set-permission \
        --account-name $(STORAGE_ACCOUNT_NAME) \
        --account-key $(STORAGE_ACCOUNT_KEY) \
        --name "$CONTAINER_NAME" \
        --public-access blob
      fi
      
      az storage blob upload \
        --account-name $(STORAGE_ACCOUNT_NAME) \
        --account-key $(STORAGE_ACCOUNT_KEY) \
        --container-name "$CONTAINER_NAME" \
        --file $(Build.ArtifactStagingDirectory)/deployment-bundle.zip \
        --name "deployment-bundle-$(buildSuffix).zip"

      az storage blob upload \
        --account-name $(STORAGE_ACCOUNT_NAME) \
        --account-key $(STORAGE_ACCOUNT_KEY) \
        --container-name "$CONTAINER_NAME" \
        --file $(Build.ArtifactStagingDirectory)/deployment-bundle.zip \
        --name deployment-bundle-latest.zip
